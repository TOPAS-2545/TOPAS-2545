/** 
MIT License

Copyright (c) 2023 Yunex Limited

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

package main

import (
    "os"
    "flag"    
    "io/ioutil"
    //"bytes"
    //"io"
    //"encoding/asn1"
    "encoding/hex"
    "fmt"
    "testapp/ipmtscd"   
    "github.com/TOPAS-2545/ber"
)

func check(e error) {
    if e != nil {
        panic(e)
    }
}


func create_message() {
    

    fmt.Println("Performing encode")

    tryme := IPMTSCD.IpmstscdOccTypeDetectorInformation{
                    OccupancyState: true,
                    OccupancyStateDuration: 33,
                    OccupancyPreviousStateDuration: 33,
                    OccupancyRate: 55.8,
                    OccupancyVolume: 77,
                }
            
    // and now generate it, we need to add the TAG=1 for the ipmstscdDetInformation
    // type, so that tag=1 for occupancyTypeDetInf, tag=2 for imageTypeDetInf and 
    // tag=3 for idTypeDetInfo      
    generatedInnerBytes, err := ber.MarshalWithParams(tryme,"tag:1")
    
    fmt.Printf("generatedInnerBytes: %+v \n",generatedInnerBytes)
    
    if err != nil {
        fmt.Println("Failed to marshall message: ", err.Error())
    }

    ipmstscdDetData := []IPMTSCD.IpmstscdDetDataSeq {
                IPMTSCD.IpmstscdDetDataSeq {
                    IpmstscdDetID: 0,
                    IpmstscdDetType: 0,
                    // wrap the loop data into the ipmstscdDetInformation entry, this is tag=2
                    // so we set the tag manually. 
                    IpmstscdDetInformation: ber.RawValue{Class: ber.ClassContextSpecific, Tag: 2, IsCompound: true, Bytes: generatedInnerBytes},
                },
        }
        
    fmt.Printf("ipmstscdDetData: %+v \n",ipmstscdDetData)
    
    expected := IPMTSCD.IPMSTSCDData{

		// add in the detector controller information
        DetectorControllerInformation: IPMTSCD.DetectorControllerInformation{
            DetectorController_index: 5,
        },
            
        // and add the Detector Data
        IpmstscdDetData: ipmstscdDetData,
    }

    generatedBytes, err := ber.Marshal(expected)    
    
    
    err = os.WriteFile("../golang-detector.ber", generatedBytes, 0644)
    check(err)
    
        
    fmt.Println("generation complete")    

}

func main() {

    var mode string

    mySet := flag.NewFlagSet("",flag.ExitOnError)
    mySet.StringVar(&mode, "m", "mode", "the operation to perform")
    mySet.Parse(os.Args[1:])
    
    

    if mode == "create" {
        create_message()
    }
    
    
    if mode == "recode" {
    
    
        // load in the file
        fmt.Println("Performing recode")
        
        // load in the BER generated by the python system
        contents,_ := ioutil.ReadFile("../python-detector.ber")
    
        var t IPMTSCD.IPMSTSCDData
    
        _, err1 := ber.Unmarshal(contents, &t)
    
        check(err1)
    
        fmt.Printf("IpmstscdDetData: %+v \n",t)
        
        if len(t.IpmstscdDetData)>0 {
            
            if t.IpmstscdDetData[0].IpmstscdDetType != 0 {
                panic("Not correct Detector type")        
            }            
            
            var occData IPMTSCD.IpmstscdOccTypeDetectorInformation 
            
            fmt.Printf(hex.Dump(t.IpmstscdDetData[0].IpmstscdDetInformation.Bytes))

            // we know this is a occupancyTypeDetInf type, so tell the unmarchal that we will
            // expect a tag=1 (occupancyTypeDetInf)
            _, err2 := ber.UnmarshalWithParams(t.IpmstscdDetData[0].IpmstscdDetInformation.Bytes, &occData, "tag:1")
            
            check(err2)
            
            // now check the fields are correct         
            if occData.OccupancyState != true {
                fmt.Fprintf(os.Stderr, "occData.OccupancyState not correct\n")
                os.Exit(1)
            }
                     
            if occData.OccupancyStateDuration != 33 {
                fmt.Fprintf(os.Stderr, "occData.OccupancyStateDuration not correct\n")
                os.Exit(1)
            }        
            
            //-------------------------------------------
            
            // and now re-generate it, we need to add the TAG=1 for the ipmstscdDetInformation
            // type, so that tag=1 for loopTypeDetInf, tag=2 for imageTypeDetInf and 
            // tag=3 for idTypeDetInfo        
            generatedInnerBytes, err3 := ber.MarshalWithParams(occData, "tag:1")
        
            check(err3)

            // and add it into the header
            // we need to set the tag to 2 for the ipmstscdDetInformation structure
            t.IpmstscdDetData[0].IpmstscdDetInformation = ber.RawValue{Class: ber.ClassContextSpecific, Tag: 2, IsCompound: true, Bytes: generatedInnerBytes}
        
        }
        fmt.Printf("t: %+v \n",t)    
        
        // and now generate the whole messgage
        generatedBytes, err := ber.Marshal(t)    
        
        //fmt.Printf("generatedBytes: %+v \n",generatedBytes)    
            
        
        err = os.WriteFile("../golang-detector.ber", generatedBytes, 0644)
        check(err)
    }
}


